package Array;

import java.util.ArrayList;

public class findUnionOfSortedArray {

	public static void main(String[] args) {
		int arr1[] = { 1, 1, 2, 3, 4, 5 };
		int n1 = arr1.length;
		int arr2[] = { 2, 3, 4, 4, 5, 6 };
		int n2 = arr2.length;

//		brute force

//		HashSet<Integer> set = new HashSet<>();
//
//		for (int i = 0; i < n1; i++) {
//			set.add(arr1[i]);
//		}
//		for (int i = 0; i < n2; i++) {
//			set.add(arr2[i]);
//		}
//		int i = 0;
//		int temp[] = new int[set.size()];
//		for (int x : set) {
//			temp[i++] = x;
//		}
//
//		for (int y : temp) {
//			System.out.print(" " + y);
//		}

// optimal use 2 pointer 
		ArrayList<Integer> list = new ArrayList<>();
		int i = 0;
		int j = 0;
		while (i < n1 && j < n2) {
			if (arr1[i] <= arr2[j]) {
				if (list.size() == 0 || list.get(list.size() - 1) != arr1[i]) {
					list.add(arr1[i]);
				}
				i++;
			} else {
				if (list.size() == 0 || list.get(list.size() - 1) != arr2[j]) {
					list.add(arr2[j]);
				}
				j++;
			}
		}
		while (i < n1) {
			if (arr1[i] <= arr2[j]) {
				if (list.size() == 0 || list.get(list.size() - 1) != arr1[i]) {
					list.add(arr1[i]);
				}
				i++;
			}
		}
		while (j < n2) {
			if (list.size() == 0 || list.get(list.size() - 1) != arr2[j]) {
				list.add(arr2[j]);
			}
			j++;
		}

		System.out.println(list);

	}

}
