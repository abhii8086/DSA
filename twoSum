class Main {
    public static void main(String[] args) {
        int arr[] = {2,6,5,8,11};
        int n =arr.length;
        int target = 14;
        for(int i=0;i<n;i++){
            for(int j=i+1;j<n;j++){
                if(i==j) {continue;}
                if(arr[i]+arr[j]==target){
                    System.out.println(i+" "+j);
                    break;
                }
            }   
        }
    }
}

// optimize approach 

import java.util.*;
class Main {
    public static void main(String[] args) {
        int[] arr = { 7, 11,2, 15};
        int n = arr.length;
        int target = 9;
        
        HashMap<Integer,Integer> map = new HashMap<>();
        
        int ans[] = new int[2];
        ans[0] = ans[1] = -1; // initalize kr de
        for(int i=0;i<n;i++){
            int num = arr[i];
            int sec = target -num;
            
            if(map.containsKey(sec)){ // hai to bata de uske index k sath
                ans[0] = map.get(sec);
                ans[1] = i;
            }
            map.put(arr[i],i); // nhi hai to dal de
        }
        
        for(int x:ans){
            System.out.println(x);
        }
    }
}





// o(n*n)
// o(1)
// class Solution {
//     public int[] twoSum(int[] nums, int target) {
//         int ans[] = new int[2];
//         int n = nums.length;
//         for(int i=0;i<n;i++){
//             for(int j=i+1;j<n;j++){
//                 if(nums[i]+nums[j]==target){
//                     ans[0] = i;
//                     ans[1] = j;
//                     break;
//                 }
//             }
//         }
//         return ans;
//     }
// }

// O(n)
//O(1)
import java.util.*;
class Solution {
    public int[] twoSum(int[] nums, int target) {
        int ans[] = new int[2];
        int n = nums.length;
        HashMap<Integer,Integer> map = new HashMap<>();
        for(int i=0;i<n;i++){
            int complement = target -nums[i];

            if(map.containsKey(complement)){
                return new int[] {map.get(complement),i};
            }
            map.put(nums[i],i);
        }
      throw new IllegalArgumentException("No two sum solution");

    }
}
