// STACK USING ARRAY 
class STACK {
    int stack[] = new int[5]; // stack size is 5 
    int top = -1 ; // to access element from stack
    int size = stack.length-1;
    public boolean isEmpty(){
        return(top==-1);
    }
    public boolean isFull(){
        return(top==size);
    }
    
    public void push(int data){
        if(!isFull())
            stack[++top] = data;
        else
            System.out.println(" Stack is Full");
    }
    public void pop(){
        if(!isEmpty())
            System.out.println(stack[top--]+" poped");
        else
            System.out.println(" Stack is Empty");
    }
    public void peek(){
        if(!isEmpty())
            System.out.println(stack[top]+" peek element");
        else
            System.out.println("Stack is Empty");
    }
    public void printStack(){
        for(int x:stack)
            System.out.println(x);
    }
    public static void main(String[] args) {
        STACK s1 = new STACK();
        s1.push(3);
        s1.push(4);
        s1.push(3);
        s1.push(4);
        s1.push(3);
        
        s1.printStack();
        
        // s1.peek();
        // s1.pop();
        // s1.pop();
        // s1.pop();
        // s1.pop();
        // s1.pop();
        // s1.peek();
        
    }
}

// STACK USING ARRAYLIST
import java.util.ArrayList;
class STACK_using_ArrayList{
    public static void main(String[] args) {
        ArrayList<Integer> s1 = new ArrayList<>();
        s1.add(1); // push
        s1.add(2);
        s1.add(3);
        
        s1.remove(2); // pop by index
        System.out.println(s1.get(1) );// peek by index
        
        
        for(int x:s1)
            System.out.println(x);
    }
}

//stack using LinkedList
class stack_using_likedList {
    private static class Node{
        int data;
        Node next;
        Node(int data){
            this.data = data;
            this.next = null;
        }
    }
    static class STACK{
      static Node head = null;
      
      public static boolean isEmpty(){
          return(head==null);
      }
      static void push(int data){
        Node newNode = new Node(data);
          if(isEmpty()){
              head = newNode;
          }else{
              newNode.next = head;
              head = newNode;
          }
      }
      public static void pop(){
          if(isEmpty()){
              System.out.println("stack is Empty()");
          }else{
              Node currElement = head;
              System.out.println(currElement.data+" is poped");
              head = head.next;
          }
      }
      
      public static void peek(){
          if(isEmpty()){
              System.out.println("stack is Empty()");
          }else{
              Node currElement = head;
              System.out.println(currElement.data+" is poped");
          }
      }
    }
    public static void main(String[] args) {
        STACK s1 = new STACK();
        s1.push(1);
        s1.push(2);
        s1.push(3);
        
        s1.pop();
        s1.pop();
        s1.pop();
        s1.pop();
        s1.peek();
        
        System.out.println("Try programiz.pro");
        
    }
}
